datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]

}

model User {
  id               String         @id @default(cuid())
  username         String?        @unique
  email            String?        @unique
  name             String?
  verifiedEmail    Boolean        @default(false)
  emailVerified    DateTime?
  mailUpdates      Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  image            String?
  facebookId       String?        @unique
  googleId         String?        @unique
  acceptedTermsAt  DateTime?
  groupMemberships GroupMember[]
  collMemberships  RoundMember[]
  emailSettings    EmailSettings?
  Transaction      Transaction[]
  isSuperAdmin     Boolean?       @default(false)
  magiclinkCode    String?        
}

model UserMeta {
  id                  String         @id @default(cuid())
  userId              String?         @unique
  email               String?         @unique

  lastMagicLinkDate   DateTime     
}

model EmailSettings {
  id                             String  @id @default(cuid())
  commentMentions                Boolean @default(true)
  commentBecauseCocreator        Boolean @default(true)
  commentBecauseCommented        Boolean @default(true)
  allocatedToYou                 Boolean @default(true)
  refundedBecauseBucketCancelled Boolean @default(true)
  bucketPublishedInRound         Boolean @default(false)
  contributionToYourBucket       Boolean @default(true)
  roundJoinRequest               Boolean @default(true)
  user                           User    @relation(fields: [userId], references: [id])
  userId                         String  @unique
}

model ExpenseReceipt {
  id                 String   @id @default(cuid())
  description        String
  date               DateTime
  amount             Int
  attachment         String?
  expense            Expense? @relation(fields: [expenseId], references: [id])
  expenseId          String? 
  ocExpenseReceiptId String?  @unique
}

enum ExpenseStatus {
  DRAFT
  UNVERIFIED
  PENDING
  INCOMPLETE
  APPROVED
  SUBMITTED
  PAID
  REJECTED
  PROCESSING
  ERROR
  SCHEDULED_FOR_PAYMENT
  SPAM
  CANCELED
}

model Expense {
  id                  String    @id @default(cuid())
  bucket              Bucket?   @relation(fields: [bucketId], references: [id])
  bucketId            String?

  title               String
  recipientName       String?
  recipientEmail      String?
  swiftCode           String?   @default("")
  iban                String?   @default("")
  country             String?   @default("")
  city                String?   @default("")
  recipientAddress    String?    
  recipientPostalCode String?
  submittedBy         String?
  status              ExpenseStatus   @default(SUBMITTED)

  ocId                String?   @unique
  roundId             String    @default("")
  ocMeta              String?   @default("")

  receipts            ExpenseReceipt[]

  currency            String?
  exchangeRate        Float?    ///exchange rate in relation to the dollar
  paidAt              DateTime?

  createdAt           DateTime  @default(now())
}

model GroupMember {
  id                String   @id @default(cuid())
  group             Group    @relation(fields: [groupId], references: [id])
  groupId           String   @map("organizationId")
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  bio               String?
  isAdmin           Boolean  @default(false)
  discourseUsername String?
  discourseApiKey   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isApproved        Boolean  @default(true)
  hasJoined         Boolean  @default(true)

  @@unique([groupId, userId])
  @@map("OrgMember")
}

model RoundMember {
  id      String @id @default(cuid())
  round   Round  @relation(fields: [roundId], references: [id])
  roundId String @map("collectionId")
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  isAdmin     Boolean @default(false)
  isModerator Boolean @default(false) //switch to ROLES: admin, moderator, member, unapproved, banned
  bio         String?
  hasJoined   Boolean @default(true)

  isApproved Boolean  @default(false) //switch to approvedAt
  //when a user is simply removed from the member list
  //should only be looked at when isApproved is false, to simply distinguish from
  //non-approved members. this because we rely on just checking isApproved to
  //know if a user is a member
  isRemoved  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  buckets           Bucket[]
  allocations       Allocation[]
  contributions     Contribution[]
  comments          Comment[]
  flags             Flag[]
  allocatedBy       Allocation[]   @relation("allocatedBy")
  favoriteBuckets   FavoriteBucket[]

  incomingAccount   Account? @relation(name: "incoming", fields: [incomingAccountId], references: [id])
  statusAccount     Account? @relation(name: "status", fields: [statusAccountId], references: [id])
  outgoingAccount   Account? @relation(name: "outgoing", fields: [outgoingAccountId], references: [id])
  incomingAccountId String?  @unique
  outgoingAccountId String?  @unique
  statusAccountId   String?  @unique

  transactionsCreated Transaction[]
  @@unique([userId, roundId])
  @@map("CollectionMember")
}

model Group {
  id           String           @id @default(cuid())
  slug         String           @unique
  name         String
  info         String?
  logo         String?
  groupMembers GroupMember[]
  rounds       Round[]
  discourse    DiscourseConfig?
  inviteNonce  Int?

  finishedTodos        Boolean @default(false)
  experimentalFeatures Boolean @default(false)

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  isFree                 Boolean   @default(false)

  registrationPolicy RegistrationPolicy? @default(OPEN)
  visibility         Visibility?         @default(PUBLIC)

  @@map("Organization")
}

model Round {
  id          String  @id @default(cuid())
  slug        String
  group       Group   @relation(fields: [groupId], references: [id])
  groupId     String  @map("organizationId")
  singleRound Boolean @default(false) @map("singleCollection")
  title       String
  archived    Boolean @default(false)
  deleted     Boolean @default(false)

  info               String?
  about              String?
  color              String?
  registrationPolicy RegistrationPolicy
  currency           String
  visibility         Visibility         @default(PUBLIC)

  maxAmountToBucketPerUser    Int?
  bucketCreationCloses        DateTime?
  grantingOpens               DateTime?
  grantingCloses              DateTime?
  allowStretchGoals           Boolean?
  stripeAccountId             String?
  directFundingEnabled        Boolean   @default(false)
  directFundingTerms          String    @default("")
  bucketReviewIsOpen          Boolean?
  discourseCategoryId         Int?
  canCocreatorStartFunding    Boolean?  @default(false)
  canCocreatorEditOpenBuckets Boolean?  @default(false)

  tags       Tag[]
  guidelines Guideline[]
  fields     Field[]

  openCollectiveId          String?
  openCollectiveProjectId   String?
  ocVerified                Boolean?   @default(false)
  ocToken                   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roundMember   RoundMember[]
  buckets       Bucket[]
  allocations   Allocation[]
  contributions Contribution[]
  transactions  Transaction[]

  statusAccount   Account? @relation(fields: [statusAccountId], references: [id])
  statusAccountId String?  @unique

  inviteNonce     Int?
  maxMembers      Int?
  maxFreeBuckets  Int?

  @@unique([groupId, slug])
  @@map("Collection")
}

model Tag {
  id        String   @id @default(cuid())
  value     String
  round     Round    @relation(fields: [roundId], references: [id])
  roundId   String   @map("collectionId")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buckets Bucket[]
  @@unique([roundId, value])
}

model Guideline {
  id          String   @id @default(cuid())
  title       String
  description String
  position    Float
  round       Round    @relation(fields: [roundId], references: [id])
  roundId     String   @map("collectionId")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Flag        Flag[]
}

model Field {
  id          String       @id @default(cuid())
  name        String
  description String
  type        FieldType
  limit       Int?
  isRequired  Boolean
  position    Float
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  round       Round        @relation(fields: [roundId], references: [id])
  roundId     String       @map("collectionId")
  fieldValue  FieldValue[]
}

model FieldValue {
  id       String  @id @default(cuid())
  field    Field?  @relation(fields: [fieldId], references: [id])
  fieldId  String?
  value    Json
  Bucket   Bucket  @relation(fields: [bucketId], references: [id])
  bucketId String

  @@unique([bucketId, fieldId])
}

enum FieldType {
  TEXT
  MULTILINE_TEXT
  BOOLEAN
  ENUM
  FILE
}

enum RegistrationPolicy {
  OPEN
  REQUEST_TO_JOIN
  INVITE_ONLY
}

enum Visibility {
  PUBLIC
  //PRIVATE
  HIDDEN
}

enum AllocationType {
  ADD
  SET
}

model Bucket {
  id                String        @id @default(cuid())
  round             Round         @relation(fields: [roundId], references: [id])
  roundId           String        @map("collectionId")
  title             String
  description       String?
  summary           String?
  pinnedAt    DateTime?  // <-- new field for pinning
  Images            Image[]
  cocreators        RoundMember[]
  BudgetItems       BudgetItem[]
  FieldValues       FieldValue[]
  comments          Comment[]
  expenses          Expense[]
  approvedAt        DateTime?
  publishedAt       DateTime?
  fundedAt          DateTime?
  canceledAt        DateTime?
  completedAt       DateTime?
  archivedAt        DateTime?
  readyForFundingAt DateTime?

  directFundingEnabled        Boolean           @default(false)
  directFundingType           DirectFundingType @default(DONATION)
  exchangeDescription         String            @default("")
  exchangeMinimumContribution Int               @default(0)
  exchangeVat                 Int?

  deleted           Boolean        @default(false)
  discourseTopicId  Int?
  flags             Flag[]
  tags              Tag[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Contributions     Contribution[]
  statusAccount     Account?       @relation(name: "bucketStatus", fields: [statusAccountId], references: [id])
  statusAccountId   String?        @unique
  outgoingAccount   Account?       @relation(name: "bucketOutgoing", fields: [outgoingAccountId], references: [id])
  outgoingAccountId String?        @unique

  percentageFunded  Float?         @default(0)
  contributionsCount Int?          @default(0)
}

model FavoriteBucket {
  id                String        @id @default(cuid())
  bucketId          String
  roundMemberId     String    
  roundMember       RoundMember   @relation(fields: [roundMemberId], references: [id])
  reason            String?       // reason for automatic marking bucket as favorite

  createdAt         DateTime      @default(now())

  @@unique([bucketId, roundMemberId])
}

enum DirectFundingType {
  DONATION
  EXCHANGE
}

model Image {
  id       String  @id @default(cuid())
  small    String?
  large    String?
  bucket   Bucket? @relation(fields: [bucketId], references: [id])
  bucketId String?
}

model BudgetItem {
  id          String         @id @default(cuid())
  description String
  min         Int
  max         Int?
  type        BudgetItemType
  Bucket      Bucket?        @relation(fields: [bucketId], references: [id])
  bucketId    String?
}

enum BudgetItemType {
  INCOME
  EXPENSE
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  isLog        Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  collMember   RoundMember @relation(fields: [collMemberId], references: [id])
  collMemberId String
  bucket       Bucket      @relation(fields: [bucketId], references: [id])
  bucketId     String
}

model Flag {
  id              String      @id @default(cuid())
  guideline       Guideline?  @relation(fields: [guidelineId], references: [id])
  guidelineId     String?
  comment         String?
  collMember      RoundMember @relation(fields: [collMemberId], references: [id])
  collMemberId    String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  type            FlagType
  resolvingFlag   Flag?       @relation("FlagToFlag", fields: [resolvingFlagId], references: [id])
  resolvedBy      Flag?       @relation("FlagToFlag")
  resolvingFlagId String?     @unique
  bucket          Bucket      @relation(fields: [bucketId], references: [id])
  bucketId        String
}

enum FlagType {
  RAISE_FLAG
  RESOLVE_FLAG
  ALL_GOOD_FLAG
}

model Allocation {
  id             String         @id @default(cuid())
  round          Round          @relation(fields: [roundId], references: [id])
  roundId        String         @map("collectionId")
  roundMember    RoundMember    @relation(fields: [roundMemberId], references: [id])
  roundMemberId  String         @map("collectionMemberId")
  allocatedBy    RoundMember?   @relation("allocatedBy", fields: [allocatedById], references: [id])
  allocatedById  String?
  amount         Int
  amountBefore   Int?
  allocationType AllocationType @default(ADD)
  createdAt      DateTime       @default(now())

  deleted        Boolean?

  stripeSessionId String?
}

model Contribution {
  id            String      @id @default(cuid())
  round         Round       @relation(fields: [roundId], references: [id])
  roundId       String      @map("collectionId")
  roundMember   RoundMember @relation(fields: [roundMemberId], references: [id])
  roundMemberId String      @map("collectionMemberId")
  bucket        Bucket      @relation(fields: [bucketId], references: [id])
  bucketId      String
  amount        Int
  amountBefore  Int?
  createdAt     DateTime    @default(now())

  deleted       Boolean?

  stripeSessionId String?
}

model DiscourseConfig {
  id               String @id @default(cuid())
  url              String
  apiKey           String
  dreamsCategoryId Int
  minPostLength    Int
  group            Group  @relation(fields: [groupId], references: [id])
  groupId          String @unique @map("organizationId")
}

model Account {
  id String @id @default(cuid())

  roundMemberIncoming RoundMember? @relation(name: "incoming")
  roundMemberOutgoing RoundMember? @relation(name: "outgoing")
  roundMemberStatus   RoundMember? @relation(name: "status")

  bucketStatus   Bucket? @relation(name: "bucketStatus")
  bucketOutgoing Bucket? @relation(name: "bucketOutgoing")

  roundStatus Round[]

  outgoingTransactions Transaction[] @relation(name: "from")
  incomingTransactions Transaction[] @relation(name: "to")

  createdAt DateTime @default(now())
}

model Transaction {
  id String @id @default(cuid())

  amount    Int
  createdAt DateTime @default(now())

  // TODO: is the user/userId fields used? can we remove them?
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?
  roundMember   RoundMember? @relation(fields: [roundMemberId], references: [id])
  roundMemberId String?      @map("collectionMemberId")

  round   Round?  @relation(fields: [roundId], references: [id])
  roundId String? @map("collectionId")

  fromAccount   Account @relation(name: "from", fields: [fromAccountId], references: [id])
  toAccount     Account @relation(name: "to", fields: [toAccountId], references: [id])
  fromAccountId String
  toAccountId   String

  deleted       Boolean?

  stripeSessionId String?
}

model SuperAdminSession {
  id        String    @id               @default(cuid())
  start     DateTime  @default(now())
  end       DateTime?
  duration  Int
  adminId   String
}
